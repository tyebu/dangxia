2019/05/04-09:56 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 9788 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-09:56 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-09:56 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-09:56 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-09:56 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-09:56 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-09:56 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-09:56 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-09:56 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-09:56 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 6687 ms
2019/05/04-09:56 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-09:56 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-09:56 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-09:56 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-09:56 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 21.09 seconds (JVM running for 39.173)
2019/05/04-09:57 [http-nio-8088-exec-2] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556631859,1556687049,1556762350] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-09:57 [http-nio-8088-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-09:57 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-09:57 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 23 ms
2019/05/04-09:57 [http-nio-8088-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-09:57 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-09:57 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-09:57 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-09:57 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-09:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-09:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-09:57 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-09:57 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-09:57 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-09:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:01 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:01 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:01 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:01 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:01 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:01 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:01 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:01 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:02 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:02 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:02 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:02 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:02 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:02 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:06 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:06 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:06 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:06 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:06 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:06 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:06 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:06 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:07 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:07 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:07 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:07 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:07 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:07 [http-nio-8088-exec-9] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-9] Exception processing template "room/getRoomInfoByRoomId": Error resolving template [room/getRoomInfoByRoomId], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [room/getRoomInfoByRoomId], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/04-10:07 [http-nio-8088-exec-9] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [room/getRoomInfoByRoomId], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [room/getRoomInfoByRoomId], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/04-10:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:10 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:10 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:12 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:12 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:12 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:12 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:12 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:12 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:14 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:14 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:14 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:14 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:14 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:14 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:25 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:25 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:25 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:27 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:27 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:27 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:28 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:28 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:28 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:28 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:28 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:28 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:28 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:28 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:28 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:28 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:28 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:28 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:28 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:28 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:30 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:30 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:30 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:30 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:30 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:30 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:30 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) WHERE a.area_id = ? ORDER BY b.created_date DESC 
2019/05/04-10:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 1(String)
2019/05/04-10:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-10:34 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:34 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:34 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:34 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:34 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:34 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:34 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:34 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:34 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:34 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:34 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:34 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:34 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:34 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-10:34 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-10:34 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-10:34 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:34 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:34 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:34 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:34 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:34 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:34 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:34 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:36 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:36 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:36 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:36 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:36 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:36 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:36 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:36 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:36 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:36 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:36 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:36 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:36 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:36 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:36 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:36 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:36 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:36 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:36 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:36 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:36 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:36 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:36 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:36 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:38 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_id = ? ORDER BY created_date DESC 
2019/05/04-10:38 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 3(String)
2019/05/04-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:38 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 1
2019/05/04-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.updateUserByCondition- ==>  Preparing: UPDATE user SET real_name = ?, password = ?, user_card = ?, user_sex = ? WHERE user_id = ? 
2019/05/04-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.updateUserByCondition- ==> Parameters: 夏明明(String), MTIzNDU2(String), 410923199712286619(String), true(Boolean), 3(String)
2019/05/04-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.updateUserByCondition- <==    Updates: 1
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:38 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:38 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_id = ? ORDER BY created_date DESC 
2019/05/04-10:38 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 3(String)
2019/05/04-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:38 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 1
2019/05/04-10:39 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-10:39 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-10:39 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-10:42 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:43 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:43 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:43 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:43 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:44 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:44 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:44 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:44 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:44 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:44 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:44 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:44 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:44 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:46 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:46 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:46 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:46 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:47 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:47 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:47 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:47 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:47 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:47 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:47 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:47 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:47 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:47 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:47 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:47 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:47 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:47 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:48 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:48 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:48 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:48 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:48 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:48 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:48 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:49 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-10:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:49 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:49 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:49 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:49 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:49 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:49 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:49 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:49 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:51 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:51 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:51 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:51 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:51 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:51 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:51 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:51 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:51 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:52 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:52 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:52 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:52 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:52 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:52 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:52 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:52 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:52 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-10:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-10:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-10:55 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-10:55 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-10:55 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-10:55 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-10:55 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-10:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-10:55 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-10:55 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-10:55 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-10:55 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-11:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:07 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:07 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:07 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:07 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:08 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:08 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:08 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:08 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:08 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:08 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:08 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:08 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:08 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:09 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:09 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:09 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET roomN_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ? WHERE room_id = ? 
2019/05/04-11:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-02(String), null
2019/05/04-11:10 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ? WHERE room_id = ? 
2019/05/04-11:10 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-02(String), null
2019/05/04-11:10 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:10 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:10 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:10 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:11 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:11 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ?, remark = ? WHERE room_id = ? 
2019/05/04-11:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-30(String), xxx(String), null
2019/05/04-11:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:11 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:11 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:11 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:11 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:12 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:12 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:12 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:12 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:12 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:12 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:12 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:12 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:12 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:12 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ? WHERE room_id = ? 
2019/05/04-11:12 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 65(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-02(String), null
2019/05/04-11:12 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:12 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:12 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:12 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:12 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:13 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:13 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 3(String)
2019/05/04-11:13 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:13 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:13 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:13 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:13 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:13 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:13 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:13 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:13 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:13 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ? WHERE room_id = ? 
2019/05/04-11:13 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 4(String), 2019-05-02(String), 2022-07-02(String), null
2019/05/04-11:13 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:13 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:13 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:13 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:13 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:13 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:13 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:13 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ? WHERE room_id = ? 
2019/05/04-11:13 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-02(String), null
2019/05/04-11:13 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:13 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:13 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:14 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:14 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:14 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:14 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:14 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:14 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:14 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:14 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ?, remark = ? WHERE room_id = ? 
2019/05/04-11:14 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-02(String), 00000(String), null
2019/05/04-11:14 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:14 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:14 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:17 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 9844 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-11:17 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-11:17 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-11:17 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-11:17 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-11:17 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-11:17 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-11:17 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-11:17 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-11:17 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 6766 ms
2019/05/04-11:17 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-11:17 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-11:17 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-11:17 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-11:17 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 12.587 seconds (JVM running for 25.977)
2019/05/04-11:17 [http-nio-8088-exec-2] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556939463] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-11:17 [http-nio-8088-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-11:17 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-11:17 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 22 ms
2019/05/04-11:17 [http-nio-8088-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-11:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-11:17 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:18 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ? WHERE room_id = ? 
2019/05/04-11:18 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1200(String), 2(String), 2019-05-02(String), 2022-07-02(String), null
2019/05/04-11:18 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 0
2019/05/04-11:20 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:20 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:20 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:20 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:20 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:20 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:20 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:20 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:20 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:20 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==>  Preparing: UPDATE room SET room_num = ?, room_size = ?, room_area = ?, room_type_id = ?, people_rent = ?, room_rent = ?, landlord_id = ?, start_date = ?, end_date = ?, remark = ? WHERE room_id = ? 
2019/05/04-11:20 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- ==> Parameters: 205(String), 4(String), 60(String), 3(String), 2000(String), 1000(String), 2(String), 2019-05-02(String), 2022-07-02(String), xxxxxx(String), 4(String)
2019/05/04-11:20 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.updateRoomInfo- <==    Updates: 1
2019/05/04-11:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:20 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-11:20 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-11:20 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-11:20 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-11:20 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-11:20 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-11:20 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-11:20 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-11:20 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-11:20 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-11:20 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-11:20 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-11:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAllAreaName- ==>  Preparing: SELECT DISTINCT area_name FROM area 
2019/05/04-11:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAllAreaName- ==> Parameters: 
2019/05/04-11:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAllAreaName- <==      Total: 9
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getNeighbourhoodByAreaName- ==>  Preparing: SELECT neighbourhood FROM area WHERE area_name = ? 
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getNeighbourhoodByAreaName- ==> Parameters: 上海市闵行区(String)
2019/05/04-11:20 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getNeighbourhoodByAreaName- <==      Total: 2
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getIdByAreaNameAndNeighbourhood- ==>  Preparing: SELECT area_id FROM area WHERE area_name = ? AND neighbourhood = ? 
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getIdByAreaNameAndNeighbourhood- ==> Parameters: 上海市闵行区(String), 小爱公寓(String)
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getIdByAreaNameAndNeighbourhood- <==      Total: 1
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) WHERE a.area_id = ? AND b.building_name = ? ORDER BY b.created_date DESC 
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 12(Integer), 一号楼(String)
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 0
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.insertBuilding- ==>  Preparing: INSERT INTO building ( building_name, area_id, created_user, created_date, is_del ) VALUES ( ?, ?, null, NOW(), 0 ) 
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.insertBuilding- ==> Parameters: 一号楼(String), 12(Integer)
2019/05/04-11:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.insertBuilding- <==    Updates: 1
2019/05/04-11:21 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-11:21 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-11:21 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-13:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-13:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-13:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-13:39 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-13:39 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-13:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-13:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-13:39 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-13:39 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-13:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-13:40 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-13:40 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-13:40 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-13:40 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-13:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-13:41 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-13:41 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-13:41 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-13:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-13:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:05 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:05 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:05 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:05 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: null
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: null
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:05 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:05 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:05 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: null
2019/05/04-14:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:06 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:08 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 10052 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-14:08 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-14:08 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-14:08 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-14:08 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-14:08 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-14:08 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-14:08 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-14:08 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-14:08 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 3934 ms
2019/05/04-14:08 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-14:08 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-14:08 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-14:08 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-14:08 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 8.287 seconds (JVM running for 20.821)
2019/05/04-14:08 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556949935] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-14:08 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-14:08 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-14:08 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 25 ms
2019/05/04-14:09 [http-nio-8088-exec-6] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-14:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:09 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:09 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: null
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: null
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:09 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:09 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:09 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: null
2019/05/04-14:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:10 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:11 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:11 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:11 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:11 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: 1(String)
2019/05/04-14:11 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==>  Preparing: SELECT COUNT(*) FROM room WHERE building_id = ? AND is_del = 0 
2019/05/04-14:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- ==> Parameters: 2(String)
2019/05/04-14:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomCountByBuildingId- <==      Total: 1
2019/05/04-14:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==>  Preparing: UPDATE building SET is_del = ?, modify_date = NOW() 
2019/05/04-14:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- ==> Parameters: true(Boolean)
2019/05/04-14:12 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.updateBuilding- <==    Updates: 4
2019/05/04-14:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:18 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:18 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:22 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:22 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:22 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:22 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:23 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:23 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:23 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:23 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:23 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:23 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) WHERE u.is_del = 0) table_count 
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-14:23 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:23 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 2
2019/05/04-14:24 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 12752 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-14:24 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-14:24 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-14:24 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-14:24 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-14:24 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-14:24 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-14:24 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-14:24 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-14:24 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 4582 ms
2019/05/04-14:24 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-14:24 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-14:24 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-14:24 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-14:24 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 12.618 seconds (JVM running for 26.885)
2019/05/04-14:24 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556951009] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-14:24 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-14:24 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-14:24 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 87 ms
2019/05/04-14:24 [http-nio-8088-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-14:24 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:24 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:24 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:26 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:26 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:26 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/04-14:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:27 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:27 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:27 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:31 [restartedMain] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 7220 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-14:31 [restartedMain] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-14:31 [restartedMain] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-14:31 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-14:31 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-14:31 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 12724 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-14:31 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-14:31 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-14:31 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-14:31 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-14:31 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-14:31 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-14:31 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-14:31 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-14:31 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 5417 ms
2019/05/04-14:31 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-14:31 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-14:31 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-14:31 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-14:31 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 14.334 seconds (JVM running for 28.293)
2019/05/04-14:31 [http-nio-8088-exec-2] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556951247] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-14:31 [http-nio-8088-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-14:31 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-14:31 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 44 ms
2019/05/04-14:31 [http-nio-8088-exec-6] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-14:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-14:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-14:31 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:31 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:31 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-14:31 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:31 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-14:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-14:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-14:33 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:33 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:33 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:33 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:33 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:33 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:34 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 13288 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-14:34 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-14:34 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-14:34 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-14:34 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-14:34 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-14:34 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-14:34 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-14:34 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-14:34 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 4668 ms
2019/05/04-14:34 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-14:35 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-14:35 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-14:35 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-14:35 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 10.525 seconds (JVM running for 22.082)
2019/05/04-14:35 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556951502] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-14:35 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-14:35 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-14:35 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 79 ms
2019/05/04-14:35 [http-nio-8088-exec-3] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-14:35 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:35 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:35 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:38 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:38 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:38 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, DATE_FORMAT(b.created_date, '%Y-%m-%d %h:%i:%s') created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:42 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:42 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:42 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:43 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 13280 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-14:43 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-14:43 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-14:43 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-14:43 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-14:43 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-14:43 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-14:43 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-14:43 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-14:43 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 4329 ms
2019/05/04-14:43 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-14:43 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-14:43 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-14:43 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-14:43 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 10.196 seconds (JVM running for 21.485)
2019/05/04-14:43 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556952157] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-14:43 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-14:43 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-14:43 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 67 ms
2019/05/04-14:43 [http-nio-8088-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-14:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:44 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:44 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:44 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-14:44 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/04-14:44 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/04-14:44 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 4
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, usr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-15:02 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 1
2019/05/04-15:03 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:03 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:03 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:03 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-15:03 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-15:03 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-15:03 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-15:03 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:03 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:03 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:05 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-15:06 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 1
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, usr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-15:06 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 1
2019/05/04-15:09 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:09 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-15:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:09 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-15:09 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-15:09 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-15:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==>  Preparing: SELECT landlord_id, landlord_name FROM landlord 
2019/05/04-15:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- ==> Parameters: 
2019/05/04-15:09 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_id = ? ORDER BY r.created_date DESC 
2019/05/04-15:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 4(String)
2019/05/04-15:09 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordList- <==      Total: 7
2019/05/04-15:09 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:17 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/04-15:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/04-15:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, usr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 1
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 4
2019/05/04-15:17 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:17 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:17 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:18 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) WHERE a.area_id = ? ORDER BY b.created_date DESC 
2019/05/04-15:18 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 1(String)
2019/05/04-15:18 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-15:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE a.area_id = ? AND r.room_status = ? ORDER BY r.created_date DESC 
2019/05/04-15:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: null, 0(String)
2019/05/04-15:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE a.area_id = ? AND r.room_status = ? ORDER BY r.created_date DESC 
2019/05/04-15:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: null, 0(String)
2019/05/04-15:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE a.area_id = ? AND r.room_status = ? ORDER BY r.created_date DESC 
2019/05/04-15:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: null, 0(String)
2019/05/04-15:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) WHERE a.area_id = ? ORDER BY b.created_date DESC 
2019/05/04-15:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 1(String)
2019/05/04-15:20 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-15:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE a.area_id = ? AND r.room_status = ? ORDER BY r.created_date DESC 
2019/05/04-15:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: null, 0(String)
2019/05/04-15:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:22 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) WHERE a.area_id = ? ORDER BY b.created_date DESC 
2019/05/04-15:22 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 1(String)
2019/05/04-15:22 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-15:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE a.area_id = ? AND r.room_status = ? ORDER BY r.created_date DESC 
2019/05/04-15:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: null, 0(String)
2019/05/04-15:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:23 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE a.area_id = ? AND r.room_status = ? ORDER BY r.created_date DESC 
2019/05/04-15:23 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: null, 0(String)
2019/05/04-15:23 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:28 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:28 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:28 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:28 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, b.created_date, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) WHERE a.area_id = ? ORDER BY b.created_date DESC 
2019/05/04-15:28 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 1(String)
2019/05/04-15:28 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/04-15:28 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE b.building_id = ? AND r.room_status = ? AND r.is_del = ? ORDER BY r.created_date DESC 
2019/05/04-15:28 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 3(String), 0(String), 0(String)
2019/05/04-15:28 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-15:28 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE b.building_id = ? AND r.room_status = ? AND r.is_del = ? ORDER BY r.created_date DESC 
2019/05/04-15:28 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 2(String), 0(String), 0(String)
2019/05/04-15:28 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/04-15:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE b.building_id = ? AND r.room_status = ? AND r.is_del = ? ORDER BY r.created_date DESC 
2019/05/04-15:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 1(String), 0(String), 0(String)
2019/05/04-15:28 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/04-15:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name, r.remark FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE b.building_id = ? AND r.room_status = ? AND r.is_del = ? ORDER BY r.created_date DESC 
2019/05/04-15:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 3(String), 0(String), 0(String)
2019/05/04-15:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/04-15:30 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:30 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:30 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:30 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 
2019/05/04-15:30 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 
2019/05/04-15:30 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 
2019/05/04-15:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 
2019/05/04-15:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) WHERE u.is_del = 0 
2019/05/04-15:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 
2019/05/04-15:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:37 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), null, l李晓明(String), 北京市辖区东城区(String), 1(String), 25(String), 410923199812256616(String), null
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), MTIzNDU2(String), l李晓明(String), 北京市辖区东城区(String), 1(String), 25(String), 410923199812256616(String), null
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), MTIzNDU2(String), l李晓明(String), 北京市辖区东城区(String), false(Boolean), 25(String), 410923199812256616(String), null
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- <==    Updates: 1
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==>  Preparing: SELECT LAST_INSERT_ID() 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==> Parameters: 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- <==      Total: 1
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==>  Preparing: INSERT INTO room_user ( room_id, user_id ) VALUES ( ?, ? ) 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==> Parameters: 4(String), 4(Integer)
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- <==    Updates: 1
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/04-15:42 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 4(String)
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), MTIzNDU2(String), l李晓明(String), 北京市辖区东城区(String), false(Boolean), 25(String), 410923199812256616(String), null
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- <==    Updates: 1
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==>  Preparing: SELECT LAST_INSERT_ID() 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==> Parameters: 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- <==      Total: 1
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==>  Preparing: INSERT INTO room_user ( room_id, user_id ) VALUES ( ?, ? ) 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==> Parameters: 4(String), 5(Integer)
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- <==    Updates: 1
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/04-15:45 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), MTIzNDU2(String), l李晓明(String), 北京市辖区东城区(String), false(Boolean), 25(String), 410923199812256616(String), null
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- <==    Updates: 1
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==>  Preparing: SELECT LAST_INSERT_ID() 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==> Parameters: 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- <==      Total: 1
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==>  Preparing: INSERT INTO room_user ( room_id, user_id ) VALUES ( ?, ? ) 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==> Parameters: 4(String), 6(Integer)
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- <==    Updates: 1
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id in (?) 
2019/05/04-15:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), MTIzNDU2(String), l李晓明(String), 北京市辖区东城区(String), false(Boolean), 25(String), 410923199812256616(String), null
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- <==    Updates: 1
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==>  Preparing: SELECT LAST_INSERT_ID() 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==> Parameters: 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- <==      Total: 1
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==>  Preparing: INSERT INTO room_user ( room_id, user_id ) VALUES ( ?, ? ) 
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==> Parameters: 4(String), 7(Integer)
2019/05/04-15:50 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_phone = ? 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 13523798548(String)
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 AND u.user_card = ? 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 410923199812256616(String)
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==>  Preparing: SELECT * FROM room WHERE room_id = ? 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- ==> Parameters: 4(Integer)
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByRoomId- <==      Total: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==>  Preparing: INSERT INTO user ( user_phone, password, real_name, user_addr, user_sex, user_age, user_card, created_user, created_date, live_status ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 1 ) 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- ==> Parameters: 13523798548(String), MTIzNDU2(String), 李晓明(String), 北京市辖区东城区(String), false(Boolean), 25(String), 410923199812256616(String), null
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==>  Preparing: SELECT LAST_INSERT_ID() 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- ==> Parameters: 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.insertUserInfo!selectKey- <==      Total: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==>  Preparing: INSERT INTO room_user ( room_id, user_id ) VALUES ( ?, ? ) 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- ==> Parameters: 4(String), 8(Integer)
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.insertRoomUser- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd- ==>  Preparing: UPDATE room SET people_num = people_num - 1 WHERE room_id = ? 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd- ==> Parameters: 4(String)
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==>  Preparing: INSERT INTO user_rent_record ( user_id, room_id, people_rent, pay_rent, pay_pattern, pay_pic, start_date, end_date, payment_date, created_date, created_user, rent_remark ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ? ) 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==> Parameters: 8(Integer), 4(String), 4(String), 2000(String), 现金(String), null, 2019-05-04(String), 2019-06-04(String), null, null, null
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.stay.IStayDao.insertStayRecord- ==>  Preparing: INSERT INTO user_stay_record ( user_id, room_id, start_date, end_date, pay_status, created_date, created_user, stay_remark ) VALUES ( ?, ?, ?, ?, ?, NOW(), ?, ? ) 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.stay.IStayDao.insertStayRecord- ==> Parameters: 8(Integer), 4(String), 2019-05-04(String), 2019-06-04(String), null, null, xxx(String)
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.stay.IStayDao.insertStayRecord- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.deposit.IDepositDao.insertUserDeposit- ==>  Preparing: INSERT INTO user_deposit ( user_id, deposit_amount, created_date, created_user ) VALUES ( ?, ?, NOW(), ? ) 
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.deposit.IDepositDao.insertUserDeposit- ==> Parameters: 8(Integer), 100(String), null
2019/05/04-15:57 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.deposit.IDepositDao.insertUserDeposit- <==    Updates: 1
2019/05/04-15:57 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-15:57 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-15:57 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-15:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 2
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-15:58 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, usr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-15:59 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, usr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:02 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-16:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 '入住中' WHEN 1 '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 2
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-16:04 [http-nio-8088-exec-10] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''入住中'
        WHEN 1 '已离宿'
        END AS is_del2,
        u.is_del,' at line 19
### The error may exist in file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\stay\StayMapper.xml]
### The error may involve com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition-Inline
### The error occurred while setting parameters
### SQL: SELECT         usr.user_stay_record_id,         usr.user_id,         u.real_name,         r.room_num,         usr.created_user,         DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date,         DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date,         DATE_FORMAT(         usr.created_date,         '%Y-%m-%d %h:%i:%s'         ) created_date,         DATE_FORMAT(         usr.modify_date,         '%Y-%m-%d %h:%i:%s'         ) modify_date,         usr.stay_remark,         CASE u.is_del         WHEN 0 '入住中'         WHEN 1 '已离宿'         END AS is_del2,         u.is_del,         a.area_name,         a.neighbourhood,         b.building_name         FROM         user_stay_record usr         LEFT JOIN user u ON (usr.user_id = u.user_id)         LEFT JOIN room r ON (usr.room_id = r.room_id)         LEFT JOIN building b ON (         r.building_id = b.building_id         )         LEFT JOIN area a ON (a.area_id = b.building_id)                    ORDER BY usr.created_date DESC
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''入住中'
        WHEN 1 '已离宿'
        END AS is_del2,
        u.is_del,' at line 19
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''入住中'
        WHEN 1 '已离宿'
        END AS is_del2,
        u.is_del,' at line 19] with root cause
java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''入住中'
        WHEN 1 '已离宿'
        END AS is_del2,
        u.is_del,' at line 19
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:970)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:387)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:494)
	at sun.reflect.GeneratedMethodAccessor98.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45005)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy88.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at sun.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45005)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:49)
	at com.github.pagehelper.SqlUtil._processPage(SqlUtil.java:401)
	at com.github.pagehelper.SqlUtil.processPage(SqlUtil.java:374)
	at com.github.pagehelper.PageHelper.intercept(PageHelper.java:255)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy86.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor95.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45005)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:144)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:77)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy79.getStayRecordByCondition(Unknown Source)
	at com.wxc.dangxia.service.stay.impl.StayServiceImpl.getStayRecordByCondition(StayServiceImpl.java:107)
	at com.wxc.dangxia.service.stay.impl.StayServiceImpl$$FastClassBySpringCGLIB$$c4a53ddd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:669)
	at com.wxc.dangxia.service.stay.impl.StayServiceImpl$$EnhancerBySpringCGLIB$$44065781.getStayRecordByCondition(<generated>)
	at com.wxc.dangxia.controller.stay.StayController.getStayRecordByCondition(StayController.java:69)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45005)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/04-16:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/04-16:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-16:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 2
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY usr.created_date DESC 
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 2
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) WHERE DATE_FORMAT(usr.start_date, '%Y-%m-%d') >= DATE_FORMAT(?, '%Y-%m-%d') ORDER BY usr.created_date DESC 
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 2019-05-05(String)
2019/05/04-16:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 0
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) WHERE DATE_FORMAT(usr.start_date, '%Y-%m-%d') >= DATE_FORMAT(?, '%Y-%m-%d') ORDER BY usr.created_date DESC 
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 2019-05-04(String)
2019/05/04-16:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) WHERE DATE_FORMAT(usr.start_date, '%Y-%m-%d') >= DATE_FORMAT(?, '%Y-%m-%d') AND DATE_FORMAT(usr.end_date, '%Y-%m-%d') <= DATE_FORMAT(?, '%Y-%m-%d') ORDER BY usr.created_date DESC 
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 2019-05-04(String), 2019-05-08(String)
2019/05/04-16:25 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 0
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) WHERE DATE_FORMAT(usr.end_date, '%Y-%m-%d') <= DATE_FORMAT(?, '%Y-%m-%d') ORDER BY usr.created_date DESC 
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 2019-05-08(String)
2019/05/04-16:25 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==>  Preparing: SELECT count(*) FROM user_stay_record usr LEFT JOIN user u ON(usr.user_id = u.user_id) LEFT JOIN room r ON(usr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(a.area_id = b.building_id) limit ?,? 
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordCountByCondition- <==      Total: 1
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==>  Preparing: SELECT usr.user_stay_record_id, usr.user_id, u.real_name, r.room_num, usr.created_user, DATE_FORMAT(usr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(usr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT( usr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( usr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, usr.stay_remark, CASE u.is_del WHEN 0 THEN '入住中' WHEN 1 THEN '已离宿' END AS is_del2, u.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_stay_record usr LEFT JOIN user u ON (usr.user_id = u.user_id) LEFT JOIN room r ON (usr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) WHERE DATE_FORMAT(usr.end_date, '%Y-%m-%d') <= DATE_FORMAT(?, '%Y-%m-%d') AND u.real_name = ? ORDER BY usr.created_date DESC 
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- ==> Parameters: 2019-05-08(String), 夏(String)
2019/05/04-16:25 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.stay.IStayDao.getStayRecordByCondition- <==      Total: 0
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-16:28 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 2
2019/05/04-17:43 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 9604 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-17:43 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-17:43 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-17:43 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-17:43 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-17:44 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-17:44 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-17:44 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-17:44 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-17:44 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 4979 ms
2019/05/04-17:44 [main] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'areaController': Unsatisfied dependency expressed through field 'areaService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'areaServiceImpl': Unsatisfied dependency expressed through field 'areaDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'IAreaDao' defined in file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\com\wxc\dangxia\dao\area\IAreaDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
2019/05/04-17:44 [main] INFO  org.apache.catalina.core.StandardService- Stopping service [Tomcat]
2019/05/04-17:44 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener- 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019/05/04-17:44 [main] ERROR org.springframework.boot.SpringApplication- Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'areaController': Unsatisfied dependency expressed through field 'areaService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'areaServiceImpl': Unsatisfied dependency expressed through field 'areaDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'IAreaDao' defined in file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\com\wxc\dangxia\dao\area\IAreaDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:849)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:549)
	at org.springframework.context.support.AbstractApplicationContext.jrLockAndRefresh(AbstractApplicationContext.java:40002)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:41008)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.wxc.dangxia.DangxiaApplication.main(DangxiaApplication.java:13)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'areaServiceImpl': Unsatisfied dependency expressed through field 'areaDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'IAreaDao' defined in file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\com\wxc\dangxia\dao\area\IAreaDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 21 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'IAreaDao' defined in file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\com\wxc\dangxia\dao\area\IAreaDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1515)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 34 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	... 45 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 58 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:522)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:408)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:541)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:150)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b63d197.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b63d197$$FastClassBySpringCGLIB$$87ed96c4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b63d197.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.__invoke(DelegatingMethodAccessorImpl.java:43)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45009)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45012)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 59 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]'. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:520)
	... 74 common frames omitted
Caused by: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.wxc.dangxia.dao.build.IRoomDao.roomPeopleAdd. please check file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml] and file [E:\java_workspace\ideawork\dangxia\dangxia\target\classes\mapper\build\RoomMapper.xml]
	at org.apache.ibatis.session.Configuration$StrictMap.put(Configuration.java:917)
	at org.apache.ibatis.session.Configuration$StrictMap.put(Configuration.java:874)
	at org.apache.ibatis.session.Configuration.addMappedStatement(Configuration.java:673)
	at org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(MapperBuilderAssistant.java:302)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:109)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 76 common frames omitted
2019/05/04-17:49 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 8088 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-17:49 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-17:49 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-17:49 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-17:49 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-17:49 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-17:49 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-17:49 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-17:49 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-17:49 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 5276 ms
2019/05/04-17:49 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-17:49 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-17:49 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-17:49 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-17:49 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 11.408 seconds (JVM running for 21.402)
2019/05/04-17:50 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556958386] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-17:50 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-17:50 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-17:50 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 73 ms
2019/05/04-17:56 [http-nio-8088-exec-1] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-17:56 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, NOW() AS nowDate, DATEDIFF(urr.end_date,NOW()) days FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = {userCard} 
2019/05/04-17:56 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 
2019/05/04-17:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, NOW() AS nowDate, DATEDIFF(urr.end_date,NOW()) days FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-17:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-17:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-17:57 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, NOW() AS nowDate, DATEDIFF(urr.end_date,NOW()) days FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-17:57 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-17:57 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-18:01 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-18:01 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-18:01 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-18:02 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-18:02 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-18:02 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-18:37 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-18:37 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-18:37 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-18:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-18:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-18:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-18:39 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-18:39 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-18:39 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:07 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 6556 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/04-20:07 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/04-20:07 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/04-20:07 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/04-20:07 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/04-20:07 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/04-20:07 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/04-20:07 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/04-20:07 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/04-20:07 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 9738 ms
2019/05/04-20:07 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/04-20:07 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/04-20:07 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/04-20:07 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/04-20:07 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 20.63 seconds (JVM running for 32.872)
2019/05/04-20:07 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556687049,1556762350,1556935049; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556966349] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/04-20:07 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/04-20:07 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/04-20:07 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 64 ms
2019/05/04-20:07 [http-nio-8088-exec-5] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/04-20:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:11 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:11 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:12 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:14 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:14 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:14 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:14 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:22 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:22 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:22 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:24 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:24 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:24 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:26 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:26 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:26 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:28 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:28 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:28 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:36 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:36 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:36 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:36 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:36 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:36 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:38 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:38 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:38 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-20:48 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN user_deposit ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-20:48 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-20:48 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 2 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:06 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, u.live_status, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN ( SELECT * FROM user_deposit ORDER BY created_date DESC LIMIT 1 ) AS ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-21:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String)
2019/05/04-21:32 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-21:34 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==>  Preparing: SELECT u.user_id, u.real_name, urr.end_date, urr.people_rent, r.room_num, b.building_name, a.area_name, a.neighbourhood, DATEDIFF(urr.end_date,NOW()) days, NOW() nowDate, u.is_del, u.live_status, ud.deposit_amount FROM user u LEFT JOIN ( SELECT user_id, room_id, end_date, people_rent FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN ( SELECT * FROM user_deposit WHERE user_id = ( SELECT user_id FROM user WHERE user_card = ? ) ORDER BY created_date DESC LIMIT 1 ) AS ud ON(u.user_id = ud.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.user_card = ? 
2019/05/04-21:34 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- ==> Parameters: 410923199712286619(String), 410923199712286619(String)
2019/05/04-21:34 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.leave.ILeaveDao.getLeaveUserInfoByUserCard- <==      Total: 1
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 LEFT JOIN user u2 ON(usr2.user_id = u2.user_id) ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:37 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 LEFT JOIN user u2 ON(usr2.user_id = u2.user_id) WHERE usr2.user_id = u.user_id ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:38 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 GROUP BY usr2.user_id ORDER BY usr2.end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:50 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:51 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:52 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:53 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 4
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-21:54 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/04-21:55 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 3
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC, usr2.user_stay_record_id ASC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-22:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC, usr2.user_stay_record_id ASC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-22:07 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON (ru.user_id = u.user_id) LEFT JOIN room r ON (ru.room_id = r.room_id) LEFT JOIN (SELECT start_date, end_date, user_id FROM user_stay_record LIMIT 1) usr ON (u.user_id = usr.user_id) WHERE u.is_del = 0) table_count 
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN ( SELECT start_date, end_date, user_id FROM user_stay_record ORDER BY end_date DESC LIMIT 1 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 limit ?,? 
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getCountByCondition- <==      Total: 1
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==>  Preparing: SELECT u.user_id, u.user_phone, u.password, u.real_name, u.user_addr, u.user_sex AS user_sex2, CASE u.user_sex WHEN 1 THEN '男' WHEN 0 THEN '女' END AS 'user_sex', u.user_age, u.user_card, DATE_FORMAT(usr.end_date, '%Y-%m-%d') as end_date, DATE_FORMAT(usr.start_date, '%Y-%m-%d') as start_date, DATE_FORMAT(u.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.room_num, r.room_id, r.building_id, b.area_id, b.building_name, a.area_name, a.neighbourhood, u.live_status status_code, CASE u.live_status WHEN 1 THEN '入住中' WHEN 2 THEN '已离宿' WHEN 3 THEN '游离人员' END AS 'live_status' FROM user u LEFT JOIN room_user ru ON(ru.user_id = u.user_id) LEFT JOIN room r ON(ru.room_id = r.room_id) LEFT JOIN building b ON(b.building_id = r.building_id) LEFT JOIN area a ON(a.area_id = b.area_id) LEFT JOIN ( SELECT usr2.start_date, usr2.end_date, usr2.user_id FROM user_stay_record usr2 ORDER BY usr2.end_date DESC, usr2.user_stay_record_id ASC LIMIT 2 ) usr ON(u.user_id = usr.user_id) WHERE u.is_del = 0 ORDER BY created_date DESC 
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- ==> Parameters: 
2019/05/04-22:08 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getUserInfoByCondition- <==      Total: 3
2019/05/06-09:27 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-QK8FRP2 with PID 9060 (E:\java_workspace\dangxia\target\classes started by Star.Wu in E:\java_workspace\dangxia)
2019/05/06-09:27 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/06-09:27 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/06-09:27 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/06-09:27 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/06-09:27 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/06-09:27 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/06-09:27 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/06-09:27 [main] INFO  org.apache.catalina.core.AprLifecycleListener- An older version [1.2.14] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019/05/06-09:27 [main] INFO  org.apache.catalina.core.AprLifecycleListener- Loaded APR based Apache Tomcat Native library [1.2.14] using APR version [1.6.2].
2019/05/06-09:27 [main] INFO  org.apache.catalina.core.AprLifecycleListener- APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019/05/06-09:27 [main] INFO  org.apache.catalina.core.AprLifecycleListener- APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019/05/06-09:28 [main] INFO  org.apache.catalina.core.AprLifecycleListener- OpenSSL successfully initialized [OpenSSL 1.0.2l  25 May 2017]
2019/05/06-09:28 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/06-09:28 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 3586 ms
2019/05/06-09:28 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/06-09:28 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/06-09:28 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/06-09:28 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/06-09:28 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 7.36 seconds (JVM running for 15.142)
2019/05/06-09:28 [http-nio-8088-exec-2] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556156102,1556241368; Hm_lvt_b393d153aeb26b46e9431fabaf0f6190=1556415662,1556502755,1556587988,1557024191] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/06-09:28 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/06-09:28 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/06-09:28 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 39 ms
2019/05/06-09:29 [http-nio-8088-exec-9] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:30 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:31 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:32 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:32 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:33 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:33 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==>  Preparing: UPDATE user_stay_record SET end_date = ? WHERE user_id = ? 
2019/05/06-09:33 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==> Parameters: Mon Jul 04 2022 08:00:00 GMT+0800 (中国标准时间)(String), 8(String)
2019/05/06-09:33 [http-nio-8088-exec-2] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-2] Exception processing template "rent/payRent": Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-09:33 [http-nio-8088-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:41 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:42 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:42 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==>  Preparing: UPDATE user_stay_record SET end_date = ? WHERE user_id = ? 
2019/05/06-09:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==> Parameters: 2022-07-04(String), 8(String)
2019/05/06-09:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- <==    Updates: 1
2019/05/06-09:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==>  Preparing: INSERT INTO user_rent_record ( user_id, room_id, people_rent, pay_rent, pay_pattern, pay_pic, start_date, end_date, payment_date, created_date, created_user, rent_remark ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ? ) 
2019/05/06-09:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==> Parameters: 8(String), 4(String), 2000(String), 4000(String), 现金(String), null, 2019-05-04(String), 2022-07-04(String), null, null, null
2019/05/06-09:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- <==    Updates: 1
2019/05/06-09:48 [http-nio-8088-exec-2] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-2] Exception processing template "rent/payRent": Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-09:48 [http-nio-8088-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:58 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-09:58 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/06-09:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 4
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/06-10:00 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 4
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:00 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/06-10:07 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 4
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:07 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:08 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==>  Preparing: UPDATE user_stay_record SET end_date = ? WHERE user_id = ? 
2019/05/06-10:08 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==> Parameters: 2022-06-04(String), 8(String)
2019/05/06-10:08 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- <==    Updates: 1
2019/05/06-10:08 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==>  Preparing: INSERT INTO user_rent_record ( user_id, room_id, people_rent, pay_rent, pay_pattern, pay_pic, start_date, end_date, payment_date, created_date, created_user, rent_remark ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ? ) 
2019/05/06-10:08 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==> Parameters: 8(String), 4(String), 2000(String), 2000(String), 现金(String), null, 2019-05-04(String), 2022-06-04(String), null, null, null
2019/05/06-10:08 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- <==    Updates: 1
2019/05/06-10:08 [http-nio-8088-exec-10] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-10] Exception processing template "rent/payRent": Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-10:08 [http-nio-8088-exec-10] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:13 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:15 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:15 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:16 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:16 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:17 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:17 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 2 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:17 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:18 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:19 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:19 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:21 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:21 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:22 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:24 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:25 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:25 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:27 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:27 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:28 [Thread-51] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Shutting down ExecutorService 'applicationTaskExecutor'
2019/05/06-10:28 [Thread-51] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} closed
2019/05/06-10:28 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-QK8FRP2 with PID 3100 (E:\java_workspace\dangxia\target\classes started by Star.Wu in E:\java_workspace\dangxia)
2019/05/06-10:28 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/06-10:28 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/06-10:28 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/06-10:28 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/06-10:28 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.AprLifecycleListener- An older version [1.2.14] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.AprLifecycleListener- Loaded APR based Apache Tomcat Native library [1.2.14] using APR version [1.6.2].
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.AprLifecycleListener- APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.AprLifecycleListener- APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.AprLifecycleListener- OpenSSL successfully initialized [OpenSSL 1.0.2l  25 May 2017]
2019/05/06-10:28 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/06-10:28 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 3862 ms
2019/05/06-10:28 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/06-10:28 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/06-10:28 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/06-10:28 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/06-10:28 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 6.699 seconds (JVM running for 12.138)
2019/05/06-10:28 [http-nio-8088-exec-2] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556156102,1556241368; Hm_lvt_b393d153aeb26b46e9431fabaf0f6190=1556502755,1556587988,1557024191,1557106116; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1557109628] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/06-10:28 [http-nio-8088-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/06-10:28 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/06-10:28 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 21 ms
2019/05/06-10:28 [http-nio-8088-exec-6] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:29 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:29 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==>  Preparing: UPDATE user_stay_record SET end_date = ? WHERE user_id = ? 
2019/05/06-10:29 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==> Parameters: 2019-08-04(String), 8(String)
2019/05/06-10:29 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- <==    Updates: 1
2019/05/06-10:29 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==>  Preparing: INSERT INTO user_rent_record ( user_id, room_id, people_rent, pay_rent, pay_pattern, pay_pic, start_date, end_date, payment_date, created_date, created_user, rent_remark ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ? ) 
2019/05/06-10:29 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==> Parameters: 8(String), 4(String), 2000(String), 2000(String), 现金(String), null, 2019-07-04(String), 2019-08-04(String), null, null, null
2019/05/06-10:29 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- <==    Updates: 1
2019/05/06-10:29 [http-nio-8088-exec-10] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-10] Exception processing template "rent/payRent": Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-10:29 [http-nio-8088-exec-10] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:30 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==>  Preparing: UPDATE user_stay_record SET end_date = ? WHERE user_id = ? 
2019/05/06-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- ==> Parameters: 2019-09-04(String), 8(String)
2019/05/06-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.stay.IStayDao.updateStayRecord- <==    Updates: 1
2019/05/06-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==>  Preparing: INSERT INTO user_rent_record ( user_id, room_id, people_rent, pay_rent, pay_pattern, pay_pic, start_date, end_date, payment_date, created_date, created_user, rent_remark ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ? ) 
2019/05/06-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- ==> Parameters: 8(String), 4(String), 2000(String), 2000(String), 支付宝(String), null, 2019-08-04(String), 2019-09-04(String), null, null, null
2019/05/06-10:30 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.rent.IRentDao.insertRentRecord- <==    Updates: 1
2019/05/06-10:30 [http-nio-8088-exec-7] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-7] Exception processing template "rent/payRent": Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-10:30 [http-nio-8088-exec-7] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [rent/payRent], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user u LEFT JOIN (SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record LIMIT 1) urr ON (u.user_id = urr.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1) table_count 
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- ==> Parameters: 
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount_COUNT- <==      Total: 1
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==>  Preparing: SELECT COUNT(*) FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) WHERE u.is_del = 0 AND u.live_status = 1 limit ?,? 
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentCount- <==      Total: 1
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==>  Preparing: SELECT u.user_id, u.real_name, urr.start_date, urr.end_date, urr.people_rent, r.room_num, r.room_id, b.building_name, a.area_name, a.neighbourhood, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(NOW(), '%Y-%m-%d') now_date, DATEDIFF(urr.end_date, NOW()) days FROM user u LEFT JOIN ( SELECT user_rent_record_id, user_id, room_id, people_rent, start_date, end_date FROM user_rent_record ORDER BY end_date DESC LIMIT 1 ) AS urr ON(u.user_id = urr.user_id) LEFT JOIN room r ON(urr.room_id = r.room_id) LEFT JOIN building b ON(r.building_id = b.building_id) LEFT JOIN area a ON(b.area_id = a.area_id) WHERE u.is_del = 0 AND u.live_status = 1 
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- ==> Parameters: 
2019/05/06-10:30 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.user.IUserDao.getToPayRentUser- <==      Total: 1
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (a.area_id = b.building_id)) table_count 
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- ==> Parameters: 
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition_COUNT- <==      Total: 1
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) limit ?,? 
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordCountByCondition- <==      Total: 1
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==>  Preparing: SELECT urr.user_rent_record_id, urr.user_id, urr.people_rent, urr.pay_rent, urr.pay_pattern, urr.pay_pic, u.real_name, r.room_num, urr.created_user, DATE_FORMAT(urr.start_date, '%Y-%m-%d') start_date, DATE_FORMAT(urr.end_date, '%Y-%m-%d') end_date, DATE_FORMAT(urr.payment_date, '%Y-%m-%d %h:%i:%s') payment_date, DATE_FORMAT( urr.created_date, '%Y-%m-%d %h:%i:%s' ) created_date, DATE_FORMAT( urr.modify_date, '%Y-%m-%d %h:%i:%s' ) modify_date, urr.rent_remark, urr.is_del, a.area_name, a.neighbourhood, b.building_name FROM user_rent_record urr LEFT JOIN user u ON (urr.user_id = u.user_id) LEFT JOIN room r ON (urr.room_id = r.room_id) LEFT JOIN building b ON ( r.building_id = b.building_id ) LEFT JOIN area a ON (a.area_id = b.building_id) ORDER BY urr.created_date DESC 
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- ==> Parameters: 
2019/05/06-10:31 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.rent.IRentDao.getRentRecordByCondition- <==      Total: 6
