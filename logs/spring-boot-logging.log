2019/05/02-10:19 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 1744 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/02-10:19 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/02-10:19 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/02-10:19 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/02-10:19 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/02-10:19 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/02-10:19 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/02-10:19 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/02-10:19 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/02-10:19 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 4172 ms
2019/05/02-10:19 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/02-10:19 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/02-10:19 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/02-10:19 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/02-10:19 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 9.376 seconds (JVM running for 20.599)
2019/05/02-10:19 [http-nio-8088-exec-2] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556631859,1556687049,1556762350; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556763058] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/02-10:19 [http-nio-8088-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/02-10:19 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/02-10:19 [http-nio-8088-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 24 ms
2019/05/02-10:19 [http-nio-8088-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:19 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 4
2019/05/02-10:20 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:20 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 4(String)
2019/05/02-10:20 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:21 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:21 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 3(String)
2019/05/02-10:21 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_age = ?, landlord_address = ? WHERE landlord_id = ? 
2019/05/02-10:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 张红(String), 13524568974(String), 39(String), 上海市市区(String), 3(String)
2019/05/02-10:21 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:21 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 4
2019/05/02-10:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 4(String)
2019/05/02-10:24 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:24 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:24 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 3(String)
2019/05/02-10:24 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ? WHERE landlord_id = ? 
2019/05/02-10:24 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 张红(String), 13524568974(String), 0(String), 39(String), 上海市市区(String), 3(String)
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:31 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 4
2019/05/02-10:31 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:31 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 3(String)
2019/05/02-10:31 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ? WHERE landlord_id = ? 
2019/05/02-10:31 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 张红(String), 13524568974(String), 0(String), 39(String), 上海市市区(String), 3(String)
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_id = ? 
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 4(String)
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 4(String)
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET is_del = ? WHERE landlord_id = ? 
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: true(Boolean), 4(String)
2019/05/02-10:32 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:32 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 3
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_id = ? 
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 3(String)
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 3(String)
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET is_del = ? WHERE landlord_id = ? 
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: true(Boolean), 3(String)
2019/05/02-10:32 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:35 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 2
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_id = ? 
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 2(String)
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 2(String)
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET is_del = ? WHERE landlord_id = ? 
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: true(Boolean), 2(String)
2019/05/02-10:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:38 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_phone = ? AND landlord_name like concat(concat('%',?),'%') 
2019/05/02-10:38 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 13526987458(String), 张女士(String)
2019/05/02-10:38 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- ==>  Preparing: INSERT INTO landlord ( landlord_name, landlord_phone, landlord_sex, landlord_age, landlord_address, agreement_num, created_user, created_date ) VALUES ( ?, ?, ?, ?, ?, ?, ?, NOW() ) 
2019/05/02-10:38 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- ==> Parameters: 张女士(String), 13526987458(String), false(Boolean), 23(String), adssf(String), (String), null
2019/05/02-10:38 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- <==    Updates: 1
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:38 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 2
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_id = ? 
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 5(String)
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 5(String)
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET is_del = ? WHERE landlord_id = ? 
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: true(Boolean), 5(String)
2019/05/02-10:38 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_phone = ? AND landlord_name like concat(concat('%',?),'%') 
2019/05/02-10:40 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 13526458794(String), 张女士(String)
2019/05/02-10:40 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- ==>  Preparing: INSERT INTO landlord ( landlord_name, landlord_phone, landlord_sex, landlord_age, landlord_address, agreement_num, created_user, created_date ) VALUES ( ?, ?, ?, ?, ?, ?, ?, NOW() ) 
2019/05/02-10:40 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- ==> Parameters: 张女士(String), 13526458794(String), false(Boolean), 34(String), dsfs(String), (String), null
2019/05/02-10:40 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- <==    Updates: 1
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:40 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 2
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_id = ? 
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 6(String)
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 6(String)
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET is_del = ? WHERE landlord_id = ? 
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: true(Boolean), 6(String)
2019/05/02-10:40 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_phone = ? AND landlord_name like concat(concat('%',?),'%') 
2019/05/02-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 13525698745(String), 张女士(String)
2019/05/02-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- ==>  Preparing: INSERT INTO landlord ( landlord_name, landlord_phone, landlord_sex, landlord_age, landlord_address, agreement_num, created_user, created_date ) VALUES ( ?, ?, ?, ?, ?, ?, ?, NOW() ) 
2019/05/02-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- ==> Parameters: 张女士(String), 13525698745(String), false(Boolean), 32(String), sfdgd(String), (String), null
2019/05/02-10:42 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.insertLandlord- <==    Updates: 1
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:42 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 2
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 AND landlord_id = ? 
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 7(String)
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 7(String)
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET is_del = ? WHERE landlord_id = ? 
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: true(Boolean), 7(String)
2019/05/02-10:43 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:47 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:47 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:47 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:47 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:47 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:47 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), 0(String), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:50 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:50 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:50 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:50 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:50 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:50 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), 0(String), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:51 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:51 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:51 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:51 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:51 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:51 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), false(Boolean), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:51 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:52 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), false(Boolean), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:52 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:52 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:52 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:52 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:52 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:52 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:52 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), false(Boolean), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:52 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:52 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:53 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:53 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:53 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), false(Boolean), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:53 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:53 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:54 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:54 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:54 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:54 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), false(Boolean), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:54 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:54 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:56 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 AND ld.landlord_id = ? ORDER BY ld.created_date DESC 
2019/05/02-10:56 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 1(String)
2019/05/02-10:56 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:56 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==>  Preparing: UPDATE landlord SET landlord_name = ?, landlord_phone = ?, landlord_sex = ?, landlord_age = ?, landlord_address = ?, agreement_num = ? WHERE landlord_id = ? 
2019/05/02-10:56 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- ==> Parameters: 王先生(String), 18839165908(String), true(Boolean), 35(String), 河南省郑州市金水区(String), 1531348974897(String), 1(String)
2019/05/02-10:57 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.updateLandlordByCondition- <==    Updates: 1
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-10:57 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-10:59 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-10:59 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-10:59 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-10:59 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-10:59 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:00 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:00 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, r.people_rent, r.room_rent, r.room_area, r.people_rent, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:00 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:00 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' ELSE '已入住'+r.people_num+'人' END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:25 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE '已入住'+r.people_num+'人' END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:48 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:58 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-11:59 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:01 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:06 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:07 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:09 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:11 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:12 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:16 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:28 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:29 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-12:29 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:21 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:21 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:21 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:21 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:22 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:22 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:22 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:22 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:22 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:23 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:23 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:23 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:23 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:23 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:40 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:40 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:40 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:40 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:40 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:40 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:40 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:41 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:41 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:41 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:41 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:41 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:42 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:42 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:42 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:42 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:42 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:42 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:42 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:43 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:45 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:45 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:45 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:45 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:45 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:45 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:45 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT COUNT(*) FROM landlord WHERE is_del = 0) table_count 
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==>  Preparing: SELECT COUNT(*) FROM landlord WHERE is_del = 0 limit ?,? 
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getCountByCondition- <==      Total: 1
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==>  Preparing: SELECT ld.landlord_id, ld.landlord_name, ld.landlord_phone, CASE ld.landlord_sex WHEN 0 THEN '女' WHEN 1 THEN '男' END AS 'landlord_sex', ld.landlord_sex sex_code, ld.landlord_address, ld.landlord_age, ld.agreement_num, ld.created_user, DATE_FORMAT(ld.created_date, '%Y-%m-%d %h:%i:%s') AS created_date, ld.modify_user, DATE_FORMAT(ld.modify_date, '%Y-%m-%d %h:%i:%s') AS modify_date, (CASE WHEN r.roomCount = '' THEN '0' WHEN r.roomCount is null THEN '0' ELSE r.roomCount END )AS roomCount, ld.is_del FROM landlord ld LEFT JOIN( SELECT ll.landlord_id, count(*) AS roomCount FROM room r LEFT JOIN landlord ll ON(r.landlord_id = ll.landlord_id) WHERE r.is_del = 0 GROUP BY ll.landlord_id ) AS r ON(r.landlord_id = ld.landlord_id) WHERE ld.is_del = 0 ORDER BY ld.created_date DESC 
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- ==> Parameters: 
2019/05/02-13:45 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.ILandlordDao.getLandlordInfoByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:46 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:46 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room WHERE room_num = ?) table_count 
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 103(String)
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room WHERE room_num = ? limit ?,? 
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 103(String), 0(Integer), 15(Integer)
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_num = ? ORDER BY r.created_date DESC 
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 103(String)
2019/05/02-13:46 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room WHERE room_num = ?) table_count 
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: vyuv(String)
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room WHERE room_num = ? limit ?,? 
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: vyuv(String), 0(Integer), 15(Integer)
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_num = ? ORDER BY r.created_date DESC 
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: vyuv(String)
2019/05/02-13:46 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 0
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:46 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:49 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-13:49 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-13:49 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-13:49 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-13:49 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-13:49 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-13:49 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.people_rent <= ? ORDER BY r.created_date DESC 
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 1200(String)
2019/05/02-13:49 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) WHERE r.room_type_id = ? ORDER BY r.created_date DESC 
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 2(String)
2019/05/02-13:51 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 1
2019/05/02-14:31 [http-nio-8088-exec-7] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-7] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:31 [http-nio-8088-exec-7] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:31 [http-nio-8088-exec-2] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-2] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:31 [http-nio-8088-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:32 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 14820 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/02-14:32 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/02-14:32 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/02-14:32 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/02-14:32 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/02-14:32 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/02-14:32 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/02-14:32 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/02-14:32 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/02-14:32 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 5610 ms
2019/05/02-14:32 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/02-14:32 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/02-14:32 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/02-14:32 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/02-14:32 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 11.879 seconds (JVM running for 24.11)
2019/05/02-14:32 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556631859,1556687049,1556762350; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556778692] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/02-14:32 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/02-14:32 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/02-14:32 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 25 ms
2019/05/02-14:32 [http-nio-8088-exec-3] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-3] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:32 [http-nio-8088-exec-3] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:34 [http-nio-8088-exec-7] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-7] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:34 [http-nio-8088-exec-7] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:34 [http-nio-8088-exec-2] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-2] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:34 [http-nio-8088-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:35 [http-nio-8088-exec-8] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/02-14:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/02-14:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/02-14:35 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/02-14:35 [http-nio-8088-exec-1] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-1] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:35 [http-nio-8088-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:35 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==>  Preparing: SELECT b.building_id, b.building_name, b.is_del, a.area_id, a.area_name, a.neighbourhood FROM building b LEFT JOIN area a ON (b.area_id = a.area_id) ORDER BY b.created_date DESC 
2019/05/02-14:35 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- ==> Parameters: 
2019/05/02-14:35 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IBuildingDao.getBuildingsByCondition- <==      Total: 3
2019/05/02-14:35 [http-nio-8088-exec-8] ERROR org.thymeleaf.TemplateEngine- [THYMELEAF][http-nio-8088-exec-8] Exception processing template "build/room": An error happened during template parsing (template: "class path resource [templates/build/room.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 53 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]" - line 48, col 43)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 55 common frames omitted
Caused by: org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 81 common frames omitted
2019/05/02-14:35 [http-nio-8088-exec-8] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [/dangxia] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/build/room.html]")] with root cause
org.attoparser.ParseException: (Line = 48, Column = 43) Malformed markup: Attribute "lay-event" appears more than once in element
	at org.attoparser.MarkupEventProcessorHandler.handleAttribute(MarkupEventProcessorHandler.java:549)
	at org.attoparser.ParsingAttributeSequenceUtil.parseAttributeSequence(ParsingAttributeSequenceUtil.java:300)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:153)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:302)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.expression.FragmentExpression.executeFragmentExpression(FragmentExpression.java:391)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:89)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpressionParameters(FragmentExpression.java:529)
	at org.thymeleaf.standard.expression.FragmentExpression.doCreateExecutedFragmentExpression(FragmentExpression.java:471)
	at org.thymeleaf.standard.expression.FragmentExpression.createExecutedFragmentExpression(FragmentExpression.java:426)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:359)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/05/02-14:38 [Druid-ConnectionPool-Create-354922458] ERROR com.alibaba.druid.pool.DruidDataSource- create connection SQLException, url: jdbc:mysql://39.108.153.198:3306/dangxia_apart?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=gbk&zeroDateTimeBehavior=convertToNull&useSSL=false, errorCode 0, state 08S01
com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at com.mysql.cj.jdbc.exceptions.SQLError.createCommunicationsException(SQLError.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:64)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1468)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1533)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2333)
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.__newInstance(DelegatingConstructorAccessorImpl.java:45)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45009)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45012)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:152)
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825)
	... 6 common frames omitted
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65)
	... 9 common frames omitted
2019/05/02-14:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:39 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:39 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:39 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:39 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:39 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:41 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:41 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:41 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:41 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:41 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:43 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:43 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:43 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:43 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:43 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:44 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:44 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:44 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:44 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:44 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:44 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:44 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(String)
2019/05/02-14:48 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:48 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:48 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:48 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:48 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:48 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(String)
2019/05/02-14:50 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:50 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:50 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:50 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:50 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:50 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:50 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:50 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:50 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(String)
2019/05/02-14:51 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:51 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:51 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:51 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:51 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:51 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:51 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:52 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:52 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(String)
2019/05/02-14:53 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:53 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:53 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:53 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:53 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:53 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:53 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:53 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:53 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(String)
2019/05/02-14:55 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:55 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:55 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:55 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:55 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:55 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:55 [http-nio-8088-exec-8] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:55 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:55 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-14:55 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 13536 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/02-14:55 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/02-14:55 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/02-14:55 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/02-14:55 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/02-14:55 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/02-14:55 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/02-14:55 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/02-14:55 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/02-14:55 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 5290 ms
2019/05/02-14:55 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/02-14:55 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/02-14:55 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/02-14:55 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/02-14:55 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 13.844 seconds (JVM running for 28.815)
2019/05/02-14:56 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556631859,1556687049,1556762350; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556779984] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/02-14:56 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/02-14:56 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/02-14:56 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 30 ms
2019/05/02-14:56 [http-nio-8088-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/02-14:56 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-14:56 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-14:56 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-14:56 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-14:56 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-14:56 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-14:56 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-14:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-14:56 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-15:00 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:00 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:00 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:00 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:00 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:00 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:00 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:00 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-15:00 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-15:01 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:01 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:01 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:01 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:01 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:01 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (0) FROM room_user WHERE room_id = ? 
2019/05/02-15:01 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-15:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:04 [http-nio-8088-exec-9] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:04 [http-nio-8088-exec-10] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:04 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-15:04 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-15:05 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 14564 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/02-15:05 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/02-15:05 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/02-15:05 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/02-15:05 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/02-15:05 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/02-15:05 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/02-15:05 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/02-15:05 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/02-15:05 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 3927 ms
2019/05/02-15:05 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/02-15:05 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/02-15:05 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/02-15:05 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/02-15:05 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 8.613 seconds (JVM running for 18.832)
2019/05/02-15:05 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556631859,1556687049,1556762350; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556780675] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/02-15:05 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/02-15:05 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/02-15:05 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 24 ms
2019/05/02-15:05 [http-nio-8088-exec-2] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/02-15:05 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:05 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:05 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:05 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:05 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:05 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:05 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-15:05 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-15:09 [main] INFO  com.wxc.dangxia.DangxiaApplication- Starting DangxiaApplication on DESKTOP-H5URIFQ with PID 14352 (E:\java_workspace\ideawork\dangxia\dangxia\target\classes started by Administrator in E:\java_workspace\ideawork\dangxia\dangxia)
2019/05/02-15:09 [main] DEBUG com.wxc.dangxia.DangxiaApplication- Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019/05/02-15:09 [main] INFO  com.wxc.dangxia.DangxiaApplication- No active profile set, falling back to default profiles: default
2019/05/02-15:09 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019/05/02-15:09 [main] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor- For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019/05/02-15:09 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat initialized with port(s): 8088 (http)
2019/05/02-15:09 [main] INFO  org.apache.catalina.core.StandardService- Starting service [Tomcat]
2019/05/02-15:09 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet engine: [Apache Tomcat/9.0.17]
2019/05/02-15:09 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring embedded WebApplicationContext
2019/05/02-15:09 [main] INFO  org.springframework.web.context.ContextLoader- Root WebApplicationContext: initialization completed in 6104 ms
2019/05/02-15:09 [main] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor- Initializing ExecutorService 'applicationTaskExecutor'
2019/05/02-15:09 [main] INFO  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping- Adding welcome page template: index
2019/05/02-15:09 [main] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- LiveReload server is running on port 35729
2019/05/02-15:09 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer- Tomcat started on port(s): 8088 (http) with context path '/dangxia'
2019/05/02-15:09 [main] INFO  com.wxc.dangxia.DangxiaApplication- Started DangxiaApplication in 12.286 seconds (JVM running for 25.464)
2019/05/02-15:09 [http-nio-8088-exec-1] INFO  org.apache.tomcat.util.http.parser.Cookie- A cookie header was received [1556631859,1556687049,1556762350; Hm_lpvt_b393d153aeb26b46e9431fabaf0f6190=1556780675] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2019/05/02-15:09 [http-nio-8088-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/dangxia]- Initializing Spring DispatcherServlet 'dispatcherServlet'
2019/05/02-15:09 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Initializing Servlet 'dispatcherServlet'
2019/05/02-15:09 [http-nio-8088-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet- Completed initialization in 27 ms
2019/05/02-15:10 [http-nio-8088-exec-3] INFO  com.alibaba.druid.pool.DruidDataSource- {dataSource-1} inited
2019/05/02-15:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:10 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:10 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:10 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-15:10 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(String)
2019/05/02-15:14 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:14 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:14 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:14 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:14 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:14 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:14 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:14 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = ? 
2019/05/02-15:14 [http-nio-8088-exec-7] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 3(Integer)
2019/05/02-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:17 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:17 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:17 [http-nio-8088-exec-5] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = 3 
2019/05/02-15:17 [http-nio-8088-exec-6] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 
2019/05/02-15:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==>  Preparing: SELECT * FROM area 
2019/05/02-15:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- ==> Parameters: 
2019/05/02-15:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==>  Preparing: SELECT room_type_id, room_type_name FROM room_type 
2019/05/02-15:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- ==> Parameters: 
2019/05/02-15:18 [http-nio-8088-exec-1] DEBUG com.wxc.dangxia.dao.area.IAreaDao.getAreaInfo- <==      Total: 21
2019/05/02-15:18 [http-nio-8088-exec-2] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomType- <==      Total: 4
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==>  Preparing: SELECT count(0) FROM (SELECT count(*) FROM room) table_count 
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- ==> Parameters: 
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition_COUNT- <==      Total: 1
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==>  Preparing: SELECT count(*) FROM room limit ?,? 
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- ==> Parameters: 0(Integer), 15(Integer)
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getCountByCondition- <==      Total: 1
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==>  Preparing: SELECT r.room_id, r.room_num, r.room_size, r.people_num, CASE WHEN r.people_num = 0 THEN '未入住' WHEN r.people_num is null THEN '未入住' ELSE CONCAT('已入住',r.people_num,'人') END AS people_num2, CASE WHEN r.room_status = 0 THEN '已启用' WHEN r.room_status = 1 THEN '已住满' WHEN r.room_status = 2 THEN '已停用' END AS room_status, r.room_status room_status2, r.people_rent, r.room_rent, r.room_area, r.start_date, r.end_date, r.created_user, DATE_FORMAT(r.created_date, '%Y-%m-%d %h:%i:%s') as created_date, r.modify_user, DATE_FORMAT(r.modify_date, '%Y-%m-%d %h:%i:%s') as modify_date, r.is_del, b.building_id, b.building_name, a.area_name, a.neighbourhood, l.landlord_id, l.landlord_name, l.landlord_phone, l.landlord_sex, rt.room_type_id, rt.room_type_name FROM room r LEFT JOIN building b ON (r.building_id = b.building_id) LEFT JOIN area a ON (b.area_id = a.area_id) LEFT JOIN landlord l ON (l.landlord_id = r.landlord_id) LEFT JOIN room_type rt ON (r.room_type_id = rt.room_type_id) ORDER BY r.created_date DESC 
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- ==> Parameters: 
2019/05/02-15:18 [http-nio-8088-exec-3] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getRoomInfoByCondition- <==      Total: 3
2019/05/02-15:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==>  Preparing: SELECT COUNT (*) FROM room_user WHERE room_id = 3 
2019/05/02-15:18 [http-nio-8088-exec-4] DEBUG com.wxc.dangxia.dao.build.IRoomDao.getPeopleCountByRoomId- ==> Parameters: 
